From f69f77bc65203ec3ab3dd898df5f93a267d9fc09 Mon Sep 17 00:00:00 2001
From: Michael Puerrer <Michael.Puerrer@ligo.org>
Date: Mon, 13 Nov 2017 17:30:03 +0100
Subject: [PATCH 07/18] Compute TF2 phase in separate functions

For now only print the phasing
---
 lalsimulation/src/LALSimIMRTEOBv4ROM.c | 174 +++++++++++++++++++--------------
 1 file changed, 103 insertions(+), 71 deletions(-)

diff --git a/lalsimulation/src/LALSimIMRTEOBv4ROM.c b/lalsimulation/src/LALSimIMRTEOBv4ROM.c
index 2b0a22e..54a8325 100644
--- a/lalsimulation/src/LALSimIMRTEOBv4ROM.c
+++ b/lalsimulation/src/LALSimIMRTEOBv4ROM.c
@@ -1048,6 +1048,108 @@ static void GluePhasing(
   gsl_interp_accel_free(acc_phi_lo);
 }
 
+static int TaylorF2Phasing(
+  double Mtot,
+  double q,
+  double chi1,
+  double chi2,
+  double lambda1,
+  double lambda2,
+  gsl_vector *Mf
+);
+
+static int TaylorF2Phasing(
+  double Mtot,
+  double q,
+  double chi1,
+  double chi2,
+  double lambda1,
+  double lambda2,
+  gsl_vector *Mfs
+) {
+  PNPhasingSeries *pn = NULL;
+  LALDict *extraParams = XLALCreateDict();
+  XLALSimInspiralWaveformParamsInsertPNSpinOrder(extraParams, LAL_SIM_INSPIRAL_SPIN_ORDER_35PN);
+  // Ideally, we should be able to specify lambdas like this, but for now the phasing functon does not use the lambda parameters!
+  // XLALSimInspiralWaveformParamsInsertTidalLambda1(extraParams, lambda1);
+  // XLALSimInspiralWaveformParamsInsertTidalLambda2(extraParams, lambda2);
+  // See src/LALSimInspiralTaylorF2.c:XLALSimInspiralTaylorF2AlignedPhasingArray() for how to add the tidal terms
+  // We add the terms after the XLALSimInspiralTaylorF2AlignedPhasing() call below to the structure of PN coefficients.
+
+  // FIXME: We should be able to switch on quadrupole-monopole terms (self-spin deformation of the two bodies)
+  // from TaylorF2; later these can be replaced with EOB as well. Just add a switch for now.
+  // XLALSimInspiralWaveformParamsInsertdQuadMon1(extraParams, dquadmon1);
+  // XLALSimInspiralWaveformParamsInsertdQuadMon2(extraParams, dquadmon2);
+
+  double m1OverM = q / (1.0+q);
+  double m2OverM = 1.0 / (1.0+q);
+  double m1 = Mtot * m1OverM * LAL_MSUN_SI;
+  double m2 = Mtot * m2OverM * LAL_MSUN_SI;
+  XLALSimInspiralTaylorF2AlignedPhasing(&pn, m1, m2, chi1, chi2, extraParams);
+
+  // Add tidal deformability terms
+  pn->v[10] = pn->v[0] * ( lambda1 * XLALSimInspiralTaylorF2Phasing_10PNTidalCoeff(m1OverM)
+                         + lambda2 * XLALSimInspiralTaylorF2Phasing_10PNTidalCoeff(m2OverM) );
+  pn->v[12] = pn->v[0] * ( lambda1 * XLALSimInspiralTaylorF2Phasing_12PNTidalCoeff(m1OverM)
+                         + lambda2 * XLALSimInspiralTaylorF2Phasing_12PNTidalCoeff(m2OverM) );
+
+  // Total amplitude and phase (PN with added surrogate corrections)
+  //gsl_vector *amp_at_nodes = gsl_vector_alloc(N_amp);
+  //gsl_vector *phi_at_nodes = gsl_vector_alloc(N_phi);
+
+  for (size_t i=0; i < Mfs->size; i++) {
+      const double Mf = gsl_vector_get(Mfs, i);
+      const double v = cbrt(LAL_PI * Mf);
+      const double logv = log(v);
+      // FIXME: optimize this further: v4=v2*v2, v8=v4*v4
+      const double v2 = v * v;
+      const double v3 = v * v2;
+      const double v4 = v * v3;
+      const double v5 = v * v4;
+      const double v6 = v * v5;
+      const double v7 = v * v6;
+      const double v8 = v * v7;
+      const double v9 = v * v8;
+      const double v10 = v * v9;
+      const double v12 = v2 * v10;
+      double phasing = 0.0;
+
+      phasing += pn->v[7] * v7;
+      phasing += (pn->v[6] + pn->vlogv[6] * logv) * v6;
+      phasing += (pn->v[5] + pn->vlogv[5] * logv) * v5;
+      phasing += pn->v[4] * v4;
+      phasing += pn->v[3] * v3;
+      phasing += pn->v[2] * v2;
+      phasing += pn->v[1] * v;
+      phasing += pn->v[0];
+
+      /* Tidal terms in phasing */
+      phasing += pn->v[12] * v12;
+      phasing += pn->v[10] * v10;
+
+      phasing /= v5;
+      // LALSimInspiralTaylorF2.c
+      // shft = LAL_TWOPI * (tC.gpsSeconds + 1e-9 * tC.gpsNanoSeconds);
+      // phasing += shft * f - 2.*phi_ref - ref_phasing; // FIXME: add ref
+
+      fprintf(stderr, "\nPN phasing at nodes:");
+      fprintf(stderr, "%g\n", phasing);
+
+      //fprintf(stderr, "PN phasing[%zu] = %g, %g\n", i, Mf, phasing);
+      //gsl_vector_set(phi_at_nodes, i, phasing + gsl_vector_get(sur_phi_at_nodes, i));
+      // TODO: compare total and all the terms
+  }
+  fprintf(stderr, "\n");
+  //amp * cos(phasing - LAL_PI_4) - amp * sin(phasing - LAL_PI_4) * 1.0j;
+ // amp0 = -4. * m1 * m2 / r * LAL_MRSUN_SI * LAL_MTSUN_SI * sqrt(LAL_PI/12.L);
+
+  XLALDestroyDict(extraParams);
+  XLALFree(pn);
+
+  return XLAL_SUCCESS;
+}
+
+
 /**
  * Core function for computing the ROM waveform.
  * Interpolate projection coefficient data and evaluate coefficients at desired (q, chi1, chi2).
@@ -1301,77 +1403,7 @@ fprintf(stderr, "N_amp, N_phi = %d, %d\n", N_amp, N_phi);
   // TODO: evaluate hardcoded TF2 and reconstruct waveform
   // fprintf(stderr, "%zu %zu %zu\n", amp_at_EI_nodes->size, (submodel_lo->B_amp)->size1, (submodel_lo->B_amp)->size2);
 
-  PNPhasingSeries *pn = NULL;
-  LALDict *extraParams = XLALCreateDict();
-  XLALSimInspiralWaveformParamsInsertPNSpinOrder(extraParams, LAL_SIM_INSPIRAL_SPIN_ORDER_35PN);
-  // Ideally, we should be able to specify lambdas like this, but for now the phasing functon does not use the lambda parameters!
-  // XLALSimInspiralWaveformParamsInsertTidalLambda1(extraParams, lambda1);
-  // XLALSimInspiralWaveformParamsInsertTidalLambda2(extraParams, lambda2);
-  // See src/LALSimInspiralTaylorF2.c:XLALSimInspiralTaylorF2AlignedPhasingArray() for how to add the tidal terms
-  // We add the terms after the XLALSimInspiralTaylorF2AlignedPhasing() call below to the structure of PN coefficients.
-
-  // FIXME: We should be able to switch on quadrupole-monopole terms (self-spin deformation of the two bodies)
-  // from TaylorF2; later these can be replaced with EOB as well.
-  // XLALSimInspiralWaveformParamsInsertdQuadMon1(extraParams, dquadmon1);
-  // XLALSimInspiralWaveformParamsInsertdQuadMon2(extraParams, dquadmon2);
-
-  double m1OverM = q / (1.0+q);
-  double m2OverM = 1.0 / (1.0+q);
-  double m1 = Mtot * m1OverM * LAL_MSUN_SI;
-  double m2 = Mtot * m2OverM * LAL_MSUN_SI;
-  XLALSimInspiralTaylorF2AlignedPhasing(&pn, m1, m2, chi1, chi2, extraParams);
-
-  // Add tidal deformability terms
-  pn->v[10] = pn->v[0] * ( lambda1 * XLALSimInspiralTaylorF2Phasing_10PNTidalCoeff(m1OverM)
-                         + lambda2 * XLALSimInspiralTaylorF2Phasing_10PNTidalCoeff(m2OverM) );
-  pn->v[12] = pn->v[0] * ( lambda1 * XLALSimInspiralTaylorF2Phasing_12PNTidalCoeff(m1OverM)
-                         + lambda2 * XLALSimInspiralTaylorF2Phasing_12PNTidalCoeff(m2OverM) );
-
-  // Total amplitude and phase (PN with added surrogate corrections)
-  //gsl_vector *amp_at_nodes = gsl_vector_alloc(N_amp);
-  gsl_vector *phi_at_nodes = gsl_vector_alloc(N_phi);
-
-  for (int i=0; i < N_phi; i++) {
-      const double Mf = gsl_vector_get(submodel_lo->mf_phi, i);
-      const double v = cbrt(LAL_PI * Mf);
-      const double logv = log(v);
-      // FIXME: optimize this further: v4=v2*v2, v8=v4*v4
-      const double v2 = v * v;
-      const double v3 = v * v2;
-      const double v4 = v * v3;
-      const double v5 = v * v4;
-      const double v6 = v * v5;
-      const double v7 = v * v6;
-      const double v8 = v * v7;
-      const double v9 = v * v8;
-      const double v10 = v * v9;
-      const double v12 = v2 * v10;
-      double phasing = 0.0;
-
-      phasing += pn->v[7] * v7;
-      phasing += (pn->v[6] + pn->vlogv[6] * logv) * v6;
-      phasing += (pn->v[5] + pn->vlogv[5] * logv) * v5;
-      phasing += pn->v[4] * v4;
-      phasing += pn->v[3] * v3;
-      phasing += pn->v[2] * v2;
-      phasing += pn->v[1] * v;
-      phasing += pn->v[0];
-
-      /* Tidal terms in phasing */
-      phasing += pn->v[12] * v12;
-      phasing += pn->v[10] * v10;
-
-      phasing /= v5;
-      // phasing += shft * f - 2.*phi_ref - ref_phasing; // FIXME: add ref
-
-      fprintf(stderr, "PN phasing[%d] = %g\n", i, phasing);
-      gsl_vector_set(phi_at_nodes, i, phasing + gsl_vector_get(sur_phi_at_nodes, i));
-      // TODO: compare total and all the terms
-  }
-  //amp * cos(phasing - LAL_PI_4) - amp * sin(phasing - LAL_PI_4) * 1.0j;
- // amp0 = -4. * m1 * m2 / r * LAL_MRSUN_SI * LAL_MTSUN_SI * sqrt(LAL_PI/12.L);
-
-  XLALDestroyDict(extraParams);
+TaylorF2Phasing(Mtot, q, chi1, chi2, lambda1, lambda2, submodel_lo->mf_phi);
 
   // TODO: splines for amp, phi
   // FIXME: deallocate all amp, phi variables: PN, surrogate corrections
-- 
2.5.4 (Apple Git-61)

